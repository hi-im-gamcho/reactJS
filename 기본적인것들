1. node_modules 폴더 : 프로젝트 구동에 필요한 라이브러리 코드 보관함.
2. public 폴더 : static파일들 보관하는 곳. (https://blog.naver.com/plusinx00/222051513077)
3. src 폴더 : 코드 짜는 곳.
    - app.js : 메인 페이지
    - index.js : app.js에 있는 html들을 index.html로 옮겨줌.
    - index.html :
    - package.js : 프로젝트 정보 기입해두는 파일.(프로젝트명, 버전, 라이브러리명 등) 자동 생성되는 파일



4. App.js 실행 : 터미널에 npm start



5. 에러 확인은 터미널/브라우저/console창에서 확인



6. JS의 destructing 문법.
    - array 안에 있는 데이터들을 변수로 쉽게 저장하고 싶을 때 사용하는 문법.
    - ex) let array = ['Kim', 20]; 

          let name = array[0];
          let age = array[1];
    를    
          let [name, age] = ['Kim', 20]
          이렇게 쓰는거임.
          그럼 name = Kim / age = 20이 되는거임.



last-num. JSX 문법 : js 내부에서 html코드를 작성하기 위한 js 전용 html 대체 언어.

 - 0. 코드는 return('여기에 적는거임');
     - return() 안에는 병렬로 태그 2개 이상 기입 금지.


 - 1. class => className


 - 2. 변수에 '저장되어 있던 데이터를 html에 쓰고싶다'-> {중괄호}
     - ex) <h4 id={post}>{post}</h4>
     - 2번을 '데이터 바인딩' 이라고 함.


 - 3. style 넣을 땐 style={ {스타일명 : '값'}}
     - 넣을 때 object 형식으로 넣어야 함.
     - ex) <h4 style={ {color : 'red'} }></h4

     - font-size와 같이 '-' 기호를 사용하는 스타일의 경우
       fontSize와 같이 camalcase로 작성해야 한다.


 - 4. 'state'
     - 0. 자료 저장 할 때 변수 말고 state써도 됨.

     - 1. 일반 변수와의 차이점 : 일반 변수는 갑자기 변수 안에 저장된 내용물이 바뀌면
                                 html에 자동으로 반영이 안됨.
                                 state는 자동으로 반영해줌. (= html 자동 재랜더링)        

                                 따라서, html에 자동으로 반영되게 하고싶을 때
                                 = 자주 바뀌는거 를 state에 저장하는거임.
     - 2. retrun 안에 let [a, b] = useState(보관할 자료)
         - a : 보관할 자료
         - b : state 변경용 함수.

     -3. state 변경하는 법
         - 등호로 변경 금지!!
         - state변경함수(새로운state)
         - ex) <span onClick={ () => { 여기는무조건함수가들어가야함(좋아요+1) }}>
        
